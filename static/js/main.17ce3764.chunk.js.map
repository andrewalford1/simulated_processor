{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TextEditor","classes","useStyles","react_default","a","createElement","Paper","className","paper","Console","Processor","Memory","makeStyles","theme","padding","spacing","textAlign","color","palette","text","secondary","App","Box","AppBar","position","Grid","container","item","xs","direction","App_TextEditor","App_Console","App_Processor","App_Memory","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQASMA,eAAa,WAClB,IAAMC,EAAUC,IAChB,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,UAAWN,EAAQO,OAA1B,iBAGFC,EAAU,WACf,IAAMR,EAAUC,IAChB,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,UAAWN,EAAQO,OAA1B,YAGFE,EAAY,WACjB,IAAMT,EAAUC,IAChB,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,UAAWN,EAAQO,OAA1B,cAGFG,EAAS,WACd,IAAMV,EAAUC,IAChB,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,UAAWN,EAAQO,OAA1B,WA2BFN,EAAYU,YAAW,SAAAC,GAAK,MAAK,CACtCL,MAAO,CACNM,QAASD,EAAME,QAAQ,GACvBC,UAAW,SACXC,MAAOJ,EAAMK,QAAQC,KAAKC,cAIbC,EAhCH,kBACXlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAKf,UAAS,OACbJ,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQC,SAAS,UAAjB,kBACArB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,WAAS,EAACX,QAAS,GACxBZ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAI,EAACC,IAAE,EAACC,UAAU,SAASd,QAAS,GACnDZ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACZzB,EAAAC,EAAAC,cAACyB,EAAD,OAED3B,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACZzB,EAAAC,EAAAC,cAAC0B,EAAD,QAGF5B,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACdzB,EAAAC,EAAAC,cAAC2B,EAAD,OAED7B,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAACb,QAAS,GACtBZ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACZzB,EAAAC,EAAAC,cAAC4B,EAAD,WClCeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.17ce3764.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport 'typeface-roboto';\nimport './App.css';\n\nconst TextEditor = () => {\n\tconst classes = useStyles();\n\treturn <Paper className={classes.paper}>Text Editor</Paper>;\n};\n\nconst Console = () => {\n\tconst classes = useStyles();\n\treturn <Paper className={classes.paper}>Console</Paper>;\n};\n\nconst Processor = () => {\n\tconst classes = useStyles();\n\treturn <Paper className={classes.paper}>Processor</Paper>;\n};\n\nconst Memory = () => {\n\tconst classes = useStyles();\n\treturn <Paper className={classes.paper}>Memory</Paper>;\n};\n\nconst App = () => (\n\t<Box className={`App`}>\n\t\t<AppBar position='static'>CPU Simulator </AppBar>\n\t\t<Grid container spacing={3}>\n\t\t\t<Grid container item xs direction='column' spacing={3}>\n\t\t\t\t<Grid item xs>\n\t\t\t\t\t<TextEditor />\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs>\n\t\t\t\t\t<Console />\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\t<Grid item xs={6}>\n\t\t\t\t<Processor />\n\t\t\t</Grid>\n\t\t\t<Grid item xs spacing={3}>\n\t\t\t\t<Grid item xs>\n\t\t\t\t\t<Memory />\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t</Box>\n);\n\nconst useStyles = makeStyles(theme => ({\n\tpaper: {\n\t\tpadding: theme.spacing(2),\n\t\ttextAlign: 'center',\n\t\tcolor: theme.palette.text.secondary\n\t}\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}